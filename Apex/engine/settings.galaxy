//=========================================================
//		Apex Roleplaying Engine
//		Copyright (c) 2017, Apex Group
//=========================================================
// This software is distributed under the MIT License:
// <http://opensource.org/licenses/MIT>
//=========================================================


// libapx_settings_definition
// ============================
// contains a games parameters
struct libapx_settings_definition {
	int flags;

	// map_revealed
	// ========
	// flag for whether the map is revealed
	bool map_revealed;

	// commands
	// ========
	// string containing all of the game's commands, separated by commas ", "
	string commands;

	// min_scale / max_scale
	// ===============
	// minimum and max scale of a unit that player can use from @scale
	// (not actually that useful because @actrmsg will allow arbitrary scale)
	fixed min_scale;
	fixed max_scale;

	// max_spawn_count
	// =============
	// max units a player can spawn in one instance
	int max_spawn_count;
};

// create instance of settings:
libapx_settings_definition libapx_settings;

// initializes default settings
void libapx_settings_initialize() {
	libapx_settings.map_revealed = true;
	libapx_settings.commands = "alias, macro, var";
	libapx_settings.min_scale = 0.001;
	libapx_settings.max_scale = 20.0;

	libapx_settings.max_spawn_count = 20;
}

//spawn init
void libapx_settings_initdefault()
{
	int i;
	libapx_set_spawner("spawner");

	libapx_setting_setint(libapx_setting_int_maxspawncount, 24);
	libapx_setting_setfixed(libapx_setting_fixed_minscale, 0.05);
	libapx_setting_setfixed(libapx_setting_fixed_maxscale, 10.0);

	libapx_setting_setint(libapx_setting_int_neutralcomputer, 0);
	libapx_setting_setint(libapx_setting_int_hostilecomputer, 15);
	libapx_setting_setint(libapx_setting_int_rootadminplayer, 1);

	//player id's
	libapx_setting_setint(libapx_setting_int_smarthostile, -1 );
	i = 1; // skip 0 and 15, they are neutral/hostile
	while(i != libapx_max_players - 1 ) {
		if( PlayerType(i) == c_playerTypeComputer ) {
			libapx_setting_setint(libapx_setting_int_smarthostile, i );
		}
		i = i + 1;
	}

	libapx_setting_setint(libapx_setting_int_maxspawnrate, 100);
	libapx_setting_setint(libapx_setting_int_spawnperiod, 60);
	libapx_setting_setint(libapx_setting_int_spawntimeout, 30);
	
	libapx_setting_use_xml = false;

}
