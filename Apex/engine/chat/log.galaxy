//=========================================================
//		Apex Roleplaying Engine
//		Copyright (c) 2017, Apex Group
//=========================================================
// This software is distributed under the MIT License:
// <http://opensource.org/licenses/MIT>
//=========================================================

// Log deals with messages that should be logged and able to be accessed
// elsewhere, specifically for a message log reading ui module (chatlog).
// The messages that are logged should be "ingame" messages, e.g. those
// from @say or >narrate that pertain to the roleplay story.

// number of messages to be logged
const int libapx_NLOGGED_MSG = 512;

// max number of chars in a chat log msg. This should be set so that chat log
// messages can fit into a ui chatlog reader
// (not including timestamp or a unit name)
static const int libapx_LOG_MSG_LENGTH = 60;

// guess for the size of a typical unit say msg header (timestamp + unitname)
static const int libapx_LOG_MSG_HEADER_GUESS = 24;

// event signal when a new chatlog message is added
const string libapx_EVENT_CHATLOG = "libapx_EVENT_CHATLOG ";

// Type: libapx_log_msg
// ==============
// Message information unit stored in chatlog array
struct libapx_log_msg {
	int author;		// player number of the creator of this msg
	text timestamp;	// text formatted timestamp [H:M:S]
	text msg;		// text formatted message
	bool is_part_of_prev;	// flag for whether this message part of the previous
							// useful for multi-line split messages
};

libapx_log_msg[libapx_NLOGGED_MSG] libapx_chatlog;

// Counter for the current log index in the chatlog array.
// The index of chatlog array must be cyclical: that is, after writing to
// index libapx_NLOGGED_MSG-1, the index will cycle back to 0.
int libapx_chatlog_counter = 0;

// flag for whether the chatlog has cycled
bool libapx_chatlog_cycled = false;

// libapx_chatlog_add
// ================
// Adds a message to the chatlog at the current counter index
// (stored in libapx_chatlog_counter). When a new chatlog message saved,
// sends event signal [libapx_EVENT_CHATLOG + index]. This can be responded
// to by any modules that utilize this chatlog. The reason for using events
// rather than direct function calls is to decouple this module from any
// clients, so there does not have to be any interlocking dependencies between
// e.g. a chatlog ui and this engine chatlog system.
// Though events introduces messiness.
static void libapx_chatlog_add(int index, int author, text timestamp, text msg, bool part_prev) {
	libapx_chatlog[index].author = author;
	libapx_chatlog[index].timestamp = timestamp;
	libapx_chatlog[index].msg = msg;
	libapx_chatlog[index].is_part_of_prev = part_prev;

	// if chat log hasn't cycled and will cycle, check flag for cycled
	if( !libapx_chatlog_cycled && libapx_chatlog_counter == (libapx_NLOGGED_MSG - 1) ) {
		libapx_chatlog_cycled = true;
	}

	// send event that this chatlog message has been updated
	TriggerSendEvent(libapx_EVENT_CHATLOG + IntToString(libapx_chatlog_counter));

	// increment counter and take modulus to ensure
	libapx_chatlog_counter = (libapx_chatlog_counter + 1) % libapx_NLOGGED_MSG;
}

// libapx_log
// ===============
// Conditions an input message into chunks for saving into the chatlog.
// Used by client to log messages.
void libapx_log(int author, text unitname, string msg) {
	int time = FixedToInt(GameGetMissionTime());
	text timestamp = StringToText("[" + IntToString( time / 3600 ) + ":" + IntToString( ( time % 3600 ) / 60 ) + ":" + IntToString( time % 60 ) + "] ");
	string chunk;

	// split up the string msg into chunks that will fit into a chat log line
	// -> must adjust for unit name in guess for first line
	if( StringLength(msg) > libapx_LOG_MSG_LENGTH - libapx_LOG_MSG_HEADER_GUESS ) {
		// must special case the first message: set length of first message in
		// series as ([HEADER] + [MAX LENGTH]), where the HEADER is an estimate
		// of the unit name. Without this, first line will always be longer than
		// others due to unit name. So first line msg is [MAX LENGTH] - [HEADER]
		libapx_chatlog_add(libapx_chatlog_counter, author, timestamp, unitname + StringToText(StringSub(msg, 1, libapx_LOG_MSG_LENGTH - libapx_LOG_MSG_HEADER_GUESS)), false);

		msg = StringSub(msg, libapx_LOG_MSG_LENGTH - libapx_LOG_MSG_HEADER_GUESS + 1, StringLength(msg));

		while( msg != "" ) {
			if( StringLength(msg) > libapx_LOG_MSG_LENGTH ) {
				chunk = StringSub(msg, 1, libapx_LOG_MSG_LENGTH);
				msg = StringSub(msg, libapx_LOG_MSG_LENGTH + 1, StringLength(msg));
				libapx_chatlog_add(libapx_chatlog_counter, author, timestamp, StringToText(chunk), true);
			} else {
				libapx_chatlog_add(libapx_chatlog_counter, author, timestamp, StringToText(msg), true);
				break;
			}
		}
	}
	else {
		libapx_chatlog_add(libapx_chatlog_counter, author, timestamp, unitname + StringToText(msg), false);
	}

}
