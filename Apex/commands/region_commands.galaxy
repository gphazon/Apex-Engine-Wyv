//=========================================================
//		Apex Roleplaying Engine
//		Copyright (c) 2017, Apex Group
//=========================================================
// This software is distributed under the MIT License:
// <http://opensource.org/licenses/MIT>
//=========================================================

// libapx_command_region_create
// ====================
// creates a region and sets it into the global data table
// regions are stored in format:
// "reg [player] [name]"
void libapx_command_region_create(int user, unitgroup u, string argv) {
	region r;
	fixed radius;
	string name = StringWord(argv, 2);

	if( name == "" ) {
		libapx_print_error(user, "Invalid region name");
		return;
	}

	radius = StringToFixed(StringWord(argv, 3));
	if( radius == 0.0 ) {
		radius = 2;
	}

	if( DataTableGetRegion( true, libapx_region_get_name(name, user) ) ) {
		libapx_print_error(user, "A region with that name already exists!");
		return;
	}

	r = RegionCircle( libapx_player[user].mouse_position, radius );

	DataTableSetRegion( true, libapx_region_get_name(name, user), r );
	libapx_print_output(user, "Region (circle) \"" + name + "\" has been created.");

	return;
}

// libapx_command_region_remove
// ==================
// removes a region and any linking to other regions
// (for linking, see libapx_command_region_teleport below)
void libapx_command_region_remove(int user, unitgroup u, string argv) {
	string name = libapx_region_get_name(StringWord(argv, 2), user);
	region rgn = DataTableGetRegion( true, name );

	if( rgn == null ) {
		libapx_print_error(user, "Region does not exist");
		return;
	}

	// first remove any linking data (for teleports) related to this region
	libapx_region_remove_links(name, user);

	// remove region
	DataTableValueRemove( true, name );

	// if region attached to unit, remove unit anchor data table entry
	if( DataTableValueExists(true, libapx_REGION_ANCHOR_DATA_TABLE_IDENTIFIER + " " + name) ) {
		DataTableValueRemove(true, libapx_REGION_ANCHOR_DATA_TABLE_IDENTIFIER + " " + name);
	}

	libapx_print_output(user, "Region \"" + libapx_region_get_public_name(name) + "\" has been removed");

	return;
}

// libapx_command_region_removeall
// ======================
// removes all regions and links
void libapx_command_region_removeall(int user, unitgroup u, string argv) {
	int index = 1;
	int removed = 0;
	string rgn_identifier = libapx_region_get_name("", user);
	string name; // full region data table name

	while( index <= DataTableValueCount(true) ) {
		if( StringContains(DataTableValueName(true, index), rgn_identifier, c_stringBegin, c_stringNoCase) ) {
			name = DataTableValueName(true, index);
			libapx_region_remove_links( name, user );
			DataTableValueRemove(true, name);
			// if region attached to unit, remove unit anchor data table entry
			if( DataTableValueExists(true, libapx_REGION_ANCHOR_DATA_TABLE_IDENTIFIER + " " + name) ) {
				DataTableValueRemove(true, libapx_REGION_ANCHOR_DATA_TABLE_IDENTIFIER + " " + name);
			}

			removed += 1;
		}
		index += 1;
	}

	if(removed > 0) {
		libapx_print_output(user, "All your regions have been removed");
	}
	else {
		libapx_print_output(user, "You have no regions to remove");
	}

	return;
}
// libapx_command_region_list
// ======================
// lists a player's regions from the data table
// because region creation is not case sensitive,
// these will always be in lowercase
void libapx_command_region_list(int user, unitgroup u, string argv) {
	int i = 1;
	string region_list = "";

	while( i < DataTableValueCount(true) ) {
		if( StringWord( DataTableValueName(true, i), 1 ) == libapx_REGION_DATA_TABLE_IDENTIFIER &&
			StringToInt( StringWord( DataTableValueName(true, i), 2) ) == user ) {
			region_list = region_list + ", " + libapx_region_get_public_name(DataTableValueName(true, i));
		}
		i += 1;
	}

	if( region_list != "" ) {
		region_list = StringSub(region_list, 3, StringLength(region_list)); // get rid of leading ", "
		libapx_print_output(user, "Your regions:\n" + region_list);
	}
	else {
		libapx_print_output(user, "You have no regions");
	}

	return;
}

// libapx_command_region_teleport
// =========================
// creates a "waygate" between two regions, allowing (any) player
// to press a dialog button to teleport selected units between
// regions. (see engine/regions.galaxy to see how regions are linked,
// events/region_waygates.galaxy to see how waygates function)
// (heavily modified from Cortex engine)
void libapx_command_region_teleport(int user, unitgroup u, string argv) {
	string rgn_1_name = libapx_region_get_name(StringWord(argv, 2), user);
	string rgn_2_name = libapx_region_get_name(StringWord(argv, 3), user);
	region rgn_1;
	region rgn_2;
	trigger t;

	if( !DataTableValueExists(true, rgn_1_name) || !DataTableValueExists(true, rgn_2_name) ) {
		libapx_print_error(user, "One or more invalid regions were entered.");
		return;
	}

	rgn_1 = DataTableGetRegion( true, rgn_1_name );
	rgn_2 = DataTableGetRegion( true, rgn_2_name );

	// remove existing links for the regions
	libapx_region_remove_links(rgn_1_name, user);
	libapx_region_remove_links(rgn_2_name, user);

	// create link between these two regions
	libapx_link_regions(rgn_1_name, rgn_2_name);

	t = TriggerCreate("libapx_region_entered");
	TriggerAddEventUnitRegion( t, null, rgn_1, true );
	TriggerAddEventUnitRegion( t, null, rgn_1, false );
	TriggerAddEventUnitRegion( t, null, rgn_2, true );
	TriggerAddEventUnitRegion( t, null, rgn_2, false );

	libapx_print_output(user, "Teleport created between regions " + libapx_region_get_public_name(rgn_1_name)
	                    + " and " + libapx_region_get_public_name(rgn_2_name));

	return;
}

// libapx_command_region_attach
// =================
// attaches a region to a unit
void libapx_command_region_attach(int user, unitgroup u, string argv) {
	string name = StringWord(argv, 2);
	region rgn = null;
	unitgroup g = libapx_player[user].context;
	point offset;
	int waygate_dialog; // waygate dialog for region

	name = libapx_region_get_name(name, user);

	rgn = DataTableGetRegion(true, name);
	if(rgn == null) {
		libapx_print_error(user, "No region with that name exists!");
		return;
	}

	offset = Point( StringToFixed(StringWord(argv, 3)),
					StringToFixed(StringWord(argv, 4)) );

	if(UnitGroupCount(g, c_unitCountAll) == 0) {	// no units selected -> unattach region
		RegionAttachToUnit(rgn, null, offset);
		DataTableValueRemove(true, libapx_REGION_ANCHOR_DATA_TABLE_IDENTIFIER + " " + name);
		libapx_print_success(user, "Region unattached successfully.");
	}
	else if(UnitGroupCount(g, c_unitCountAll) == 1) { // attach region to unit
		// if a unit has previously had region attached, remove unit custom value
		// set to track waygate dialogs (if it exists)
		if( DataTableValueExists(true, libapx_REGION_ANCHOR_DATA_TABLE_IDENTIFIER + " " + name) ) {
			UnitSetCustomValue(DataTableGetUnit(true, libapx_REGION_ANCHOR_DATA_TABLE_IDENTIFIER + " " + name), libapx_UNIT_INDEX_WAYGATE_DIALOG, 0);
		}


		// attach region to new unit
		RegionAttachToUnit(rgn, UnitGroupUnit(g, 1), offset);
		DataTableSetUnit(true, libapx_REGION_ANCHOR_DATA_TABLE_IDENTIFIER + " " + name, UnitGroupUnit(g, 1));

		// if region has assocated waygate dialog, attach it to the unit as well
		if( DataTableValueExists(true, libapx_WAYGATE_DIALOG_DATA_TABLE_IDENTIFIER + " " + name) ) {
			waygate_dialog = DataTableGetDialog(true, libapx_WAYGATE_DIALOG_DATA_TABLE_IDENTIFIER + " " + name);
			DialogSetPositionRelativeToUnit(waygate_dialog, UnitGroupUnit(g, 1), "Ref_Origin", -60, 0);
			UnitSetCustomValue(UnitGroupUnit(g, 1), libapx_UNIT_INDEX_WAYGATE_DIALOG, IntToFixed(waygate_dialog));

			// if a static anchor for waygate exists, remove it
			if( DataTableValueExists(true, libapx_WAYGATE_ANCHOR_DATA_TABLE_IDENTIFIER + " " + name) ) {
				UnitRemove(DataTableGetUnit(true, libapx_WAYGATE_ANCHOR_DATA_TABLE_IDENTIFIER + " " + name));
				DataTableValueRemove(true, libapx_WAYGATE_ANCHOR_DATA_TABLE_IDENTIFIER + " " + name);
			}
		}

		libapx_print_success(user, "Region attached successfully.");
	}
	else {
		libapx_print_error(user, "You can't attach the same region to multiple units!");
	}

	return;
}
